import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class UnsealTheSafe
{
	public long countPasswords(int N)
	{
		int i, j;
		int adj[] = new int[] {1, 2, 3, 2, 3, 4, 3, 3, 3, 2}; // number of keys adjacent to each key
		long dp[][];
		ArrayList<ArrayList<Integer>> adjInt = new ArrayList<ArrayList<Integer>>();
		ArrayList<Integer> arrInts;
		long count;
		
		dp = new long[N + 1][10];
		
		for (i = 0; i < 10; i++) {
			dp[0][i] = 0;
			dp[1][i] = 1;
			dp[2][i] = adj[i];
			adjInt.add(i, new ArrayList<Integer>());
		}
		
		populateArrayList(adjInt);
		
		for (i = 3; i <= N; i++) {
		
			for (j = 0; j < 10; j++) {
			
				arrInts = adjInt.get(j);
				count = 0;
				
				for (Integer x: arrInts) {
					count += dp[i - 1][x];
				}
				dp[i][j] = count;			
			}
		
		}
		
		long ans = 0;
		
		for (i = 0; i < 10; i++) {
			ans += dp[N][i];		
		}
		
		return ans;
	}
	
	public void populateArrayList(ArrayList<ArrayList<Integer>> adjInt) {
		ArrayList<Integer> arrInts;
		
		arrInts = adjInt.get(0);
		arrInts.add(7);
		
		arrInts = adjInt.get(1);
		arrInts.add(2);
		arrInts.add(4);
		
		arrInts = adjInt.get(2);
		arrInts.add(1);
		arrInts.add(3);
		arrInts.add(5);
		
		arrInts = adjInt.get(3);
		arrInts.add(2);
		arrInts.add(6);
		
		arrInts = adjInt.get(4);
		arrInts.add(1);
		arrInts.add(5);
		arrInts.add(7);
		
		arrInts = adjInt.get(5);
		arrInts.add(2);
		arrInts.add(4);
		arrInts.add(6);
		arrInts.add(8);
		
		arrInts = adjInt.get(6);
		arrInts.add(3);
		arrInts.add(5);
		arrInts.add(9);
		
		arrInts = adjInt.get(7);
		arrInts.add(0);
		arrInts.add(4);
		arrInts.add(8);
		
		arrInts = adjInt.get(8);
		arrInts.add(5);
		arrInts.add(7);
		arrInts.add(9);
		
		arrInts = adjInt.get(9);
		arrInts.add(6);
		arrInts.add(8);
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, boolean hasAnswer, long p1) {
		System.out.print("Test " + testNum + ": [" + p0);
		System.out.println("]");
		UnsealTheSafe obj;
		long answer;
		obj = new UnsealTheSafe();
		long startTime = System.currentTimeMillis();
		answer = obj.countPasswords(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		long p1;
		
		// ----- test 0 -----
		p0 = 2;
		p1 = 26L;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 3;
		p1 = 74L;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 25;
		p1 = 768478331222L;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
