import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class DivideByZero
{
	public int CountNumbers(int[] numbers)
	{
		int i, j, N;
		int num, denum;
		int number;
		int size;
		HashSet<Integer> sHashSet = new HashSet<Integer>();
		
		ArrayList<Integer> arr = new ArrayList<Integer>();
		
		N = numbers.length;
		
		for (i = 0; i < N; i++) {
			arr.add(numbers[i]);
			sHashSet.add(numbers[i]);
		}
		
		int X = 0;
		
		while (X < 102) {
			
			for (i = 0; i < arr.size(); i++) {
			
				Collections.sort(arr, new ArrayComp());
				
				num = arr.get(i);
			
				for (j = i + 1; j < arr.size(); j++) {
				
					
					denum = arr.get(j);
					
			//		System.out.println("Num = " + num + "; denum = " + denum);
					
					if (denum == 0) {
					//	arr.remove(i);
						continue;
					}
					
					number = num / denum;
					
					if (sHashSet.contains(number))
						continue;
					
					sHashSet.add(number);
					
					arr.add(number);
				
				}
				
				
			}
			
			X++;
			
		}
		
		size = sHashSet.size();
		
		return size;
		
	}
	
	private class ArrayComp implements Comparator<Integer> {

		@Override
		public int compare(Integer arg0, Integer arg1) {
			// TODO Auto-generated method stub
			if (arg0 > arg1)
				return -1;
			else if (arg0 < arg1)
				return 1;
			return 0;
		}
		
	}
	
		// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		DivideByZero obj;
		int answer;
		obj = new DivideByZero();
		long startTime = System.currentTimeMillis();
		answer = obj.CountNumbers(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int p1;
		
		// ----- test 0 -----
		p0 = new int[]{9,2};
		p1 = 3;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{8,2};
		p1 = 3;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{50};
		p1 = 1;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{1,5,8,30,15,4};
		p1 = 11;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{1,2,4,8,16,32,64};
		p1 = 7;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new int[]{6,2,18};
		p1 = 7;
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
