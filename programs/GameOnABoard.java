import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;

public class GameOnABoard {
	public int intCost[][];
	public int M, N;
	public int MN;
	public static int dx[] = new int[] { 0, 0, 1, -1 };
	public static int dy[] = new int[] { 1, -1, 0, 0 };
	public int distTo[][];
	public boolean marked[][];
	public Queue<Point> pq;

	public int optimalChoice(String[] cost) {
		int i, j;
		int min = Integer.MAX_VALUE;

		M = cost.length;
		N = cost[0].length();
		MN = M * N;
		distTo = new int[M][N];
		marked = new boolean[M][N];

		// System.out.println("M = " + M + "; N = " + N + "; MN = " + MN);

		pq = new PriorityQueue<Point>();

		for (i = 0; i < MN; i++) {
			// min = Math.min(min, BellmanFord(i, cost));
			// System.out.println("min = " + min);
			min = Math.min(min, Dijkstra(i, cost));
		}

		return min;
	}

	public int Dijkstra(int source, String[] cost) {

		int i, j;
		int srow, scol;
		int row, col;
		int max;
		Point point;

		pq.clear();

		initParams();

		srow = getRow(source);
		scol = getCol(source);

		point = new Point(srow, scol, getCost(cost, srow, scol));

		pq.add(point);
		distTo[srow][scol] = getCost(cost, srow, scol);

		while (!pq.isEmpty()) {

			point = pq.remove();
			row = point.getrow();
			col = point.getCol();

			if (marked[row][col])
				continue;

			for (j = 0; j < 4; j++) {
				if (!valid(row + dx[j], col + dy[j]))
					continue;
//				System.out.println("(row, col): (" + (row + dx[j]) + ","
//						+ (col + dy[j]) + ")");
				relax(cost, row, col, row + dx[j], col + dy[j]);
			}

			marked[row][col] = true;
		}

		max = getMaxDist();

		return max;

	}

	public int BellmanFord(int source, String[] cost) {
		int i, v, j;
		int row, col;
		int srow, scol;
		int max;

		srow = getRow(source);
		scol = getCol(source);

		initParams();

		distTo[srow][scol] = getCost(cost, srow, scol);

		for (i = 0; i < MN; i++) {

			for (v = 0; v < MN; v++) {

				row = getRow(v);
				col = getCol(v);

				// System.out.println("(row, col): (" + row + "," + col + ")");

				for (j = 0; j < 4; j++) {
					if (!valid(row + dx[j], col + dy[j]))
						continue;
					// System.out.println("(row, col): (" + (row + dx[i]) + ","
					// + (col + dy[i]) + ")");
					relax(cost, row, col, row + dx[j], col + dy[j]);
				}

			}
		}

		max = getMaxDist();

		// System.out.println();

		return max;

	}

	public int getMaxDist() {
		int i, j;
		int max = Integer.MIN_VALUE;

		for (i = 0; i < M; i++) {
			for (j = 0; j < N; j++) {
				max = Math.max(max, distTo[i][j]);
//				System.out.print(distTo[i][j] + " ");
			}
//			System.out.println();
		}
//		System.out.println();
		return max;
	}

	public void initParams() {

		int i, j;

		for (i = 0; i < M; i++) {
			for (j = 0; j < N; j++) {
				distTo[i][j] = 100000;
				marked[i][j] = false;
			}
		}

	}

	public void relax(String[] cost, int i, int j, int x, int y) {

		Point point;
		int c = getCost(cost, x, y);

		if (distTo[i][j] + c < distTo[x][y]) {
			distTo[x][y] = distTo[i][j] + c;
			point = new Point(x, y, distTo[x][y]);
			pq.add(point);
		}

	}

	public boolean valid(int i, int j) {

		if (i >= 0 && i < M && j >= 0 && j < N)
			return true;

		return false;

	}

	public int getRow(int MN) {
		return MN / N;
	}

	public int getCol(int MN) {
		return MN % N;
	}

	public int getCost(String[] cost, int i, int j) {
		// System.out.println("(i,j): (" + i + "," + j + ")");
		return (cost[i].charAt(j) - '0');
	}

	private class Point implements Comparable<Point> {

		private int i;
		private int j;
		private int cost;

		public Point(int i, int j, int cost) {

			this.i = i;
			this.j = j;
			this.cost = cost;

		}

		public int getrow() {
			return i;
		}

		public int getCol() {
			return j;
		}

		public int getCost() {
			return cost;
		}

		@Override
		public int compareTo(Point o) {
			// TODO Auto-generated method stub
			if (this.cost < o.getCost())
				return -1;
			else if (this.cost > o.getCost())
				return 1;
			return 0;
		}

	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0,
			boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		GameOnABoard obj;
		int answer;
		obj = new GameOnABoard();
		long startTime = System.currentTimeMillis();
		answer = obj.optimalChoice(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0
				+ " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		String[] p0;
		int p1;

		// ----- test 0 -----
		p0 = new String[] { "11", "10" };
		p1 = 2;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = new String[] { "01", "10" };
		p1 = 1;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = new String[] { "111001", "001000", "111111", "001111", "001100",
				"001011", "111001", "010011" };
		p1 = 3;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = new String[] { "001001101011", "110011001101", "111111000001",
				"111101010001", "011100101111", "110010111000", "111111110101",
				"111011110111", "111100100011", "000000000110", "101011011110",
				"011111000111", "101111001011" };
		p1 = 5;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------

		// ----- test 4 -----
		p0 = new String[] { "110010100101010110100010001100111011",
				"001000000110100011010100000001001000",
				"011000110111101001011101110111000100",
				"111001011000100101111010100110110011",
				"111000011101001010000100001010000010",
				"111001110010100101000001001100011011",
				"111110100111010101100000100111000111",
				"011111111100100111111110000001110111",
				"110000010101001111100011110000001000",
				"010010110111111100011101100000011010",
				"110001100001111001101000101110110001",
				"110010000111011110000010110111010101",
				"100100110101001001101000001101101101",
				"001011101101001100111110101111001110",
				"111010111111111100110100000011111100",
				"110101101000001001000100101011100000",
				"011011001011010001001000100000110101",
				"011111111100000011010111010011010100",
				"111001111110001110001110010100111010",
				"000001111000001100101010000001101110",
				"010000110000010010111110111000010101",
				"100010010100110011000111101001101011",
				"111010110001101011010001111101111100",
				"000111110000110000000101100101000110",
				"110000010111001001110001101010111100",
				"0111111011010010110110100" + "11111100010",
				"110101111101010100110010000011001101",
				"101101111001010100101111100001110001",
				"000110010100101111011011110010010010",
				"110101010011101000111011100000010011",
				"110001010001110011010100110000010001",
				"111010101100111100100011001101010100",
				"011000000000100001011010000100010001",
				"100000110110000001010001001111010000",
				"100011111110010011011011001110011111",
				"101100001111100101001101100000100001",
				"010000111011010110011001110011111000",
				"100010100111110111001010100101111010",
				"000110011110111011111000101000001000" };
		p1 = 7;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------

		if (all_right) {
			System.out
					.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
