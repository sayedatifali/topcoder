import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class LittleElephantAndPermutationDiv2
{
	public long getNumber(int N, int K)
	{
		int arrayA[] = new int[N];
		int arrayB[] = new int[N];
		int arrayB_backup[] = new int[N];
		int max;
		int i;
		long magic;
		long count = 0;
		
		max = N * (N + 1);
		max /= 2;
		count = fact(N);
		count *= count;
		if (K <= max)
			return count;
			
		count = 0;
		
		for (i = 0; i < N; i++) {
		
			arrayA[i] = i + 1;
			arrayB[i] = i + 1;
			arrayB_backup[i] = i + 1;
		
		}
		
//		do {
			 do {
				magic = 0;
				for (i = 0; i < N; i++) {
					magic += Math.max(arrayA[i], arrayB[i]);
				}
//				System.out.println("Magic = " + magic);
				if (magic >= K)
					count += fact(N);
			
			} while(nextPerm(arrayB));
			
//			arrayB = arrayB_backup.clone();			
		
//		} while (nextPerm(arrayA));
		
		return count;
		
	}
	
	
	
	public boolean nextPerm(int[] a) {

		int i;
		int j;
		int N;
		int temp;

		N = a.length;
		i = N - 2;

		for (; i >= 0; i--) {
			if (a[i] < a[i + 1])
				break;
		}
		if (i < 0)
			return false;

		for (j = N - 1; j >= i; j--) {
			if (a[j] > a[i]) {
				temp = a[j];
				a[j] = a[i];
				a[i] = temp;
				break;
			}
		}

		for (j = i + 1; j < (N + i + 1) / 2; j++) {
			temp = a[N - j + i];
			a[N - j + i] = a[j];
			a[j] = temp;
		}

		return true;
	}
	
	public long fact(int n) {
	
		long N;
		
		N = n;
		
		if (N == 0)
			return 1;
			
		return N * fact(n - 1);
		
	
	}
	
		// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, boolean hasAnswer, long p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
		System.out.println("]");
		LittleElephantAndPermutationDiv2 obj;
		long answer;
		obj = new LittleElephantAndPermutationDiv2();
		long startTime = System.currentTimeMillis();
		answer = obj.getNumber(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		long p2;
		
		// ----- test 0 -----
		p0 = 1;
		p1 = 1;
		p2 = 1L;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 2;
		p1 = 1;
		p2 = 4L;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 3;
		p1 = 8;
		p2 = 18L;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 10;
		p1 = 47;
		p2 = 13168189440000L;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
	

}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
