import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class ChangingSounds
{
	public int maxFinal(int[] changeIntervals, int beginLevel, int maxLevel)
	{
		int i;
		int maxLast;
		int dp[];
		int DP[][];
		int N;
		
		N = changeIntervals.length;
		dp = new int[N];
		DP = new int[N][maxLevel + 1];
		
		for (i = 0; i < N; i++)
			dp[i] = -1;
		
		maxLastRecursive(changeIntervals, beginLevel, maxLevel, 0, dp);
		
//		for (i = 0; i < N; i++)
//			System.out.println("dp[" + i + "] = " + dp[i]);
			
		for (i = 0; i < N; i++) {
			for (int j = 0; j < maxLevel + 1; j++)
				DP[i] = -1;
		}
			
		maxLast = maxLastRecursion(changeIntervals, beginLevel, maxLevel, 0, DP);

		for (i = 0; i < N; i++)
			System.out.println("dp[" + i + "] = " + dp[i]);
		
		return dp[N - 1];
	//	return dp[changeIntervals.length - 1];		
		
	}
	
	
	public void maxLastRecursive(int [] changeIntervals, int beginLevel, int maxLevel, int i, int dp[]) {
	
		int tempA;
		int tempB;
		int maxLast;
		
		if (i == changeIntervals.length)
			return;

		tempA = beginLevel - changeIntervals[i];
		tempB = beginLevel + changeIntervals[i];
		
		if (tempA < 0 && tempB > maxLevel)
			return;
			
//		if (i == changeIntervals.length - 1) {
		if (tempB <= maxLevel && tempB > dp[i])
			dp[i] = tempB;
		else if (tempA >= 0 && tempA > dp[i])
			dp[i] = tempA;


//			return dp[i];
//		}
			
		
		if (tempA >= 0)
			maxLastRecursive(changeIntervals, tempA, maxLevel, i + 1, dp);

		
		if (tempB <= maxLevel)
			maxLastRecursive(changeIntervals, tempB, maxLevel, i + 1, dp);	
		
	
	}
	
	public int maxLastRecursion(int [] changeIntervals, int beginLevel, int maxLevel, int i, int dp[][]) {

		int sumA = -1;
		int sumB = -1;
		int tempA;
		int tempB;
		int maxLast;
		int temp;
		
		if (beginLevel < 0 || beginLevel > maxLevel)
			return -1;
		
		if (i == changeIntervals.length)
			return beginLevel;
		
		sumA = maxLastRecursion(changeIntervals, beginLevel - changeIntervals[i], maxLevel, i + 1, dp);
		
		sumB = maxLastRecursion(changeIntervals, beginLevel + changeIntervals[i], maxLevel, i + 1, dp);	
		
		if (sumA >= sumB && sumA != -1)
			dp[i] = Math.max(dp[i], beginLevel - changeIntervals[i]);
		else if (sumB >= sumA && sumB != -1)
			dp[i] = Math.max(dp[i], beginLevel + changeIntervals[i]);
		
//		return Math.max(sumA, sumB);
		
		return dp[i];
	
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int p1, int p2, boolean hasAnswer, int p3) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + p1 + "," + p2);
		System.out.println("]");
		ChangingSounds obj;
		int answer;
		obj = new ChangingSounds();
		long startTime = System.currentTimeMillis();
		answer = obj.maxFinal(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int p1;
		int p2;
		int p3;
		
		// ----- test 0 -----
		p0 = new int[]{5,3,7};
		p1 = 5;
		p2 = 10;
		p3 = 10;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{15,2,9,10};
		p1 = 8;
		p2 = 20;
		p3 = -1;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{74,39,127,95,63,140,99,96,154,18,137,162,14,88};
		p1 = 40;
		p2 = 243;
		p3 = 238;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
