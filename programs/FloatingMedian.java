import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class FloatingMedian
{

	private static int tree[];
	private static int MAXN = 65537;
	
	public void update(int idx, int val) {
	
		idx++;
		
		while(idx <= MAXN) {
		
			tree[idx] += val;
			idx += (idx & -idx);
		
		}	
	
	}
	
	public int read(int idx) {
	
		int sum = 0;
		idx++;
		
		while (idx > 0) {
		
			sum += tree[idx];
			idx -= (idx & -idx);
		
		}
		
		return sum;
	
	}
	
	public int find(int sum) {
	
		int start;
		int end;
		int ans;
		int temp;
		int mid;
		
		start = 0;
		end = MAXN - 1;
		
		ans = 0;
		
		while (start < end) {
		
			mid = (start + end) / 2;
			temp = read(mid);
						
			if (sum > temp) {
				start = mid + 1;
			} else {
				end = mid;
				ans = end;
			}
		}
		
		
		return ans;
	
	}

	public long sumOfMedians(int seed, int mul, int add, int N, int K)
	{
		int i, j;
		int t[];
		int cur;
		int median;
		long sum;
		
		t = new int[N];
		
		tree = new int[MAXN];
		
		cur = seed;
		
		for (i = 0; i < N; i++) {
			t[i] = cur;
			cur = (int) ((1L * cur * mul + add) % 65536);
		}
		
		median = (K + 1) / 2;
		
		for (i = 0; i < K; i++) {
			update(t[i], 1);
		}
		
		sum = find(median);
		
		for (i = K; i < N; i++) {
		
			update(t[i - K], -1);
			update(t[i], 1);
			
			sum += find(median);
		}
		
		
		return sum;
		
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, boolean hasAnswer, long p5) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2 + "," + p3 + "," + p4);
		System.out.println("]");
		FloatingMedian obj;
		long answer;
		obj = new FloatingMedian();
		long startTime = System.currentTimeMillis();
		answer = obj.sumOfMedians(p0, p1, p2, p3, p4);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p5);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p5;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		int p2;
		int p3;
		int p4;
		long p5;
		
		// ----- test 0 -----
		p0 = 3;
		p1 = 1;
		p2 = 1;
		p3 = 10;
		p4 = 3;
		p5 = 60L;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 10;
		p1 = 0;
		p2 = 13;
		p3 = 5;
		p4 = 2;
		p5 = 49L;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 4123;
		p1 = 2341;
		p2 = 1231;
		p3 = 7;
		p4 = 3;
		p5 = 102186L;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 47;
		p1 = 5621;
		p2 = 1;
		p3 = 125000;
		p4 = 1700;
		p5 = 4040137193L;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 32321;
		p1 = 46543;
		p2 = 32552;
		p3 = 17;
		p4 = 17;
		p5 = 25569L;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
