import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class GooseInZooDivTwo
{
	private static int mod = 1000000007;
	private int M, N;
	
	public int count(String[] field, int dist)
	{
		int i, j;
//		int M, N;
		boolean bird = false;
		char [][] f;
		int count;
		
		M = field.length;
		N = field[0].length();
		
		for (i = 0; i < M; i++) {
			for (j = 0; j < N; j++) {
				if (field[i].charAt(j) == 'v') {
					bird = true;
					break;
				}
			}
		}
		
		if (!bird)
			return 0;
			
		f = new char[M][N];
		
		for (i = 0; i < M; i++)
			f[i] = field[i].toCharArray();
			
		count = 0;
		
		for (i = 0; i < M; i++) {
			for (j = 0; j < N; j++) {
			
				if (f[i][j] == 'v') {
					count++;
					dfs(f, i, j, dist);
				}
			
			}
		}
		
			
		return (int) modPow(2, count, mod) - 1;
		
	}
	
	public void dfs(char [][] field, int i, int j, int d) {
	
		int p, q;
		
		field[i][j] = '.';
		
		for (p = 0; p <= d; p++) {
			for (q = 0; p + q <=d; q++) {
		
				if (i + p < M && j + q < N) {
					if (field[i + p][j + q] == 'v')
						dfs(field, i + p, j + q, d);
				}
				if (i + p < M && j - q >= 0)
					if (field[i + p][j - q] == 'v')
						dfs(field, i + p, j - q, d);
					
				if (i - p >= 0 && j + q < N)
					if (field[i - p][j + q] == 'v')
						dfs(field, i - p, j + q, d);
					
				if (i - p >= 0 && j - q >= 0)
					if (field[i - p][j - q] == 'v')
						dfs(field, i - p, j - q, d);
			
			}
		}	
	
	}
	
	public long modPow(long a, long x, long p) {
		// calculates a^x mod p in logarithmic time.
		long res = 1;
		while (x > 0) {
			if (x % 2 != 0) {
				res = (res * a) % p;
			}
			a = (a * a) % p;
			x /= 2;
		}
		return res;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, int p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}" + "," + p1);
		System.out.println("]");
		GooseInZooDivTwo obj;
		int answer;
		obj = new GooseInZooDivTwo();
		long startTime = System.currentTimeMillis();
		answer = obj.count(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		int p1;
		int p2;
		
		// ----- test 0 -----
		p0 = new String[]{"vvv"};
		p1 = 0;
		p2 = 7;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"."};
		p1 = 100;
		p2 = 0;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"vvv"};
		p1 = 1;
		p2 = 1;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"v.v..................v............................",".v......v..................v.....................v","..v.....v....v.........v...............v......v...",".........vvv...vv.v.........v.v..................v",".....v..........v......v..v...v.......v...........","...................vv...............v.v..v.v..v...",".v.vv.................v..............v............","..vv.......v...vv.v............vv.....v.....v.....","....v..........v....v........v.......v.v.v........",".v.......v.............v.v..........vv......v.....","....v.v.......v........v.....v.................v..","....v..v..v.v..............v.v.v....v..........v..","..........v...v...................v..............v","..v........v..........................v....v..v...","....................v..v.........vv........v......","..v......v...............................v.v......","..v.v..............v........v...............vv.vv.","...vv......v...............v.v..............v.....","............................v..v.............." +
				"...v",".v.............v.......v..........................","......v...v........................v..............",".........v.....v..............vv..................","................v..v..v.........v....v.......v....","........v.....v.............v......v.v............","...........v....................v.v....v.v.v...v..","...........v......................v...v...........","..........vv...........v.v.....................v..",".....................v......v............v...v....",".....vv..........................vv.v.....v.v.....",".vv.......v...............v.......v..v.....v......","............v................v..........v....v....","................vv...v............................","................v...........v........v...v....v...","..v...v...v.............v...v........v....v..v....","......v..v.......v........v..v....vv..............","...........v..........v........v.v................","v.v......v................v....................v..",".v........v............................." +
				"...v......","............................v...v.......v.........","........................vv.v..............v...vv..",".......................vv........v.............v..","...v.............v.........................v......","....v......vv...........................v.........","....vv....v................v...vv..............v..","..................................................","vv........v...v..v.....v..v..................v....",".........v..............v.vv.v.............v......",".......v.....v......v...............v.............","..v..................v................v....v......",".....v.....v.....................v.v......v......."};
		p1 = 3;
		p2 = 797922654;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
