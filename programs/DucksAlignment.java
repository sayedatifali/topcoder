import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class DucksAlignment
{
	public int minimumTime(String[] grid)
	{
		int i;
		int j;
		int m; // m x n
		int n;
		int temp;
		int minTime;
		int min = Integer.MAX_VALUE;
		ArrayList<Integer> x = new ArrayList<Integer>();
		ArrayList<Integer> y = new ArrayList<Integer>();
		int rowCost;
		int colCost;
		int minrow;
		int mincol;
		
		m = grid.length;
		n = grid[0].length();
		
		minTime = 0;
		
		for (i = 0; i < m; i++) {		
			for (j = 0; j < n; j++) {			
				if (grid[i].charAt(j) == 'o') {				
					x.add(i);
					y.add(j);
				}
			}
		}
		int N = x.size();
		
	//	System.out.println("m = " + m + "; n = " + n + "; N = " + N);
		
		Collections.sort(x);
		Collections.sort(y);
		
		minrow = Integer.MAX_VALUE;
		// Align in a row
		for (i = 0; i < m; i++) {
			rowCost = 0;
			for (j = 0; j < N; j++) {
				rowCost += Math.abs(x.get(j) - i);
			}
			minrow = Math.min(minrow, rowCost);
		}
	//	System.out.println("minrow = " + minrow);
		mincol = Integer.MAX_VALUE;
		// Minimize column cost now
		for (i = 0; i + N <= n; i++) {
			colCost = 0;
			for (j = 0; j < N; j++) {
				colCost += Math.abs(y.get(j) - i - j);
			}
	//		System.out.println("colCost = " + colCost);
			mincol = Math.min(mincol, colCost);
		}
		
	//	System.out.println("mincol = " + mincol);
		
		minTime = mincol + minrow;
		
	//	System.out.println("Align in row min: " + minTime);
		
		mincol = Integer.MAX_VALUE;
		// Align in a column
		for (i = 0; i < n; i++) {
			colCost = 0;
			for (j = 0; j < N; j++) {
				colCost += Math.abs(y.get(j) - i);
			}
			mincol = Math.min(mincol, colCost);
		}
	//	System.out.println("mincol = " + mincol);
		minrow = Integer.MAX_VALUE;
		// Minimize row cost now
		for (i = 0; i + N <= m; i++) {
			rowCost = 0;
			for (j = 0; j < N; j++) {
				rowCost += Math.abs(x.get(j) - j - i);
			}			
			minrow = Math.min(minrow, rowCost);
		}
	//	System.out.println("minrow = " + minrow);
		
	//	System.out.println("Align in col min: " + (minrow + mincol));
		
		minTime = Math.min(minTime, minrow + mincol);
		
		return minTime;
		
	}
	
		// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		DucksAlignment obj;
		int answer;
		obj = new DucksAlignment();
		long startTime = System.currentTimeMillis();
		answer = obj.minimumTime(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		int p1;
		
		// ----- test 0 -----
		p0 = new String[]{".o","o."};
		p1 = 1;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{".o...","..o..","....o"};
		p1 = 3;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"o..........","..o........",".......o...","...........","...........","...........","........o..","..........."};
		p1 = 16;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{".........","....o....","........."};
		p1 = 0;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new String[]{"...o..........................","............................o.",".o............................","............o.................",".................o............","......................o.......","......o.......................","....o.........................","...............o..............",".......................o......","...........................o..",".......o......................"};
		p1 = 99;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING

}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
