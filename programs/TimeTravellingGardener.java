import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class TimeTravellingGardener
{
	public int determineUsage(int[] distance, int[] height)
	{
		int i = 0;
		int j = 0;
		int k = 0;
		int len;
		int slope = 0;
		
		int x1, y1, x2, y2, x3, y3;
		
		int count = 0;
		int count_min = Integer.MAX_VALUE;
		
		len = distance.length;
		
		
		for (i = 0; i < len + 1; i++) {
		
			for (j = i + 1; j < len + 1; j++) {				
				
				x1 = 0;
				y1 = height[i];
				x2 = 0;
				y2 = height[j];
				
				for (int p = i; p < j; p++)
					x2 += distance[i];
				
				for (k = 0; k < len + 1; k++) {
				
					if (k == i || k == j)
						continue;
						
					x3 = 0;
					
					if (k < i) {
						
						for (int p = k; p < i; p++)
							x3 += distance[i];
						x3 = -x3;					
					}
					
					else {						
						for (int p = k - 1; p >= i; p--)
							x3 += distance[i];						
					}
					
					y3 = height[k];
					
					int col = collinear(x1, y1, x2, y2, x3, y3);
					if (col > 0) {
						//System.out.println("Not Collinear");
						count++;
					}
					else if (col < 0) {
						count = count_min;
						break;
					}
					
				
				}
				
				System.out.println("Count = " + count);
				
				if (count < count_min)
					count_min = count;
					
				count = 0;
			}
		
		}
		
		return count_min;
	}
	
	public int collinear(int x1, int y1, int x2, int y2, int x3, int y3) {
	
		int ans;
		
		ans = x1 * (y2 - y3) - x2 * (y1 - y3) + x3 * (y1 - y2);
		
		return ans;
	
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		TimeTravellingGardener obj;
		int answer;
		obj = new TimeTravellingGardener();
		long startTime = System.currentTimeMillis();
		answer = obj.determineUsage(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int[] p1;
		int p2;
		
		// ----- test 0 -----
		p0 = new int[]{2,2};
		p1 = new int[]{1,3,10};
		p2 = 1;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{3,3};
		p1 = new int[]{3,1,3};
		p2 = 2;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{1,3};
		p1 = new int[]{4,4,4};
		p2 = 0;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{4,2};
		p1 = new int[]{9,8,5};
		p2 = 1;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{476,465,260,484};
		p1 = new int[]{39,13,8,72,80};
		p2 = 3;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new int[]{173,36,668,79,26,544};
		p1 = new int[]{488,743,203,446,444,91,453};
		p2 = 5;
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 6 -----
		p0 = new int[]{2,4,2,2,4,2,4,2,2,4};
		p1 = new int[]{2,2,10,10,10,16,16,22,22,28,28};
		p2 = 6;
		all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
