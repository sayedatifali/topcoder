import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class KingdomReorganization
{
	public boolean [] marked;
	public char [][] kingdomChar;
	public int[] connected;
	public int V;
	
	public int getCost(String[] kingdom, String[] build, String[] destroy)
	{
		int i, j;
		int v, w;
		int massiveCost = 0, minCost = 0;
		int cost;
		ArrayList<Edge> pq = new ArrayList<Edge>();
		ArrayList<Edge> mst = new ArrayList<Edge>();
		
		Edge edge;
		
		V = kingdom.length;
		marked = new boolean[V];
		kingdomChar = new char[V][V];
		connected = new int[V];
		
		for (i = 0; i < V; i++) {
			for (j = 0; j < V; j++) {
				kingdomChar[i][j] = kingdom[i].charAt(j);
				
				if (j > i) {
					if (kingdomChar[i][j] == '1') {
						cost = destroy[i].charAt(j) - 'a';
						if (cost < 0)
							cost = destroy[i].charAt(j) - 'A';
						else
							cost += 26;
						edge = new Edge(i, j, -cost);						
					} else {
						cost = build[i].charAt(j) - 'a';
						if (cost < 0)
							cost = build[i].charAt(j) - 'A';
						else
							cost += 26;
						edge = new Edge(i, j, cost);
					}
					pq.add(edge);
				}
			}
		}
		
		Collections.sort(pq);
		
		for (i = 0; i < V; i++) {
			for (j = 0; j < V; j++) {
				
				if (i == j)
					continue;
					
				if (kingdomChar[i][j] == '1') {
				
					cost = destroy[i].charAt(j) - 'a';
					if (cost < 0)
						cost = destroy[i].charAt(j) - 'A';
					else
						cost += 26;
					
					massiveCost += cost;
				
					kingdomChar[i][j] = kingdomChar[j][i] = '0';
				}
			
			}
		}
/*		
		for (Edge e: pq) {
			System.out.println("Edges: " + e.either() + "-" + e.other(e.either()) + " Cost = " + e.val);		
		}
		
		System.out.println("Massive cost = " + massiveCost);
	*/	
		connectInit();
		
		for (i = 0; i < pq.size(); i++) {
		
			if (mst.size() == V - 1)
				break;
			
			edge = pq.get(i);
			
			v = edge.either();
			w = edge.other(v);
			
			if (!isConnected(v, w)) {
			
				union(v, w);
				
				mst.add(edge);
				
				minCost += edge.val;
			
			}
		
		}
/*		
		for (Edge e: mst) {
			System.out.println("MST Edges: " + e.either() + "-" + e.other(e.either()) + " Cost = " + e.val);
			minCost += e.val;
		}
	*/	
		
		return massiveCost + minCost;
	}
	
	public void connectInit() {
	
		for (int i = 0; i < V; i++)
			connected[i] = i;
	
	}
	
	public void union(int v, int w) {
		// make v's root parent of w's root
		int p;
		p = root(w);
		connected[p] = root(v);
//		connected[w] = root(v);
	}
	
	public boolean isConnected(int v, int w) {
	
		return root(v) == root(w);
	}
	
	public int root(int v) {
		
		while ( v != connected[v])
			v = connected[v];
			
		return v;
	
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, String[] p1, String[] p2, boolean hasAnswer, int p3) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p1[i] + "\"");
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p2.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p2[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		KingdomReorganization obj;
		int answer;
		obj = new KingdomReorganization();
		long startTime = System.currentTimeMillis();
		answer = obj.getCost(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		String[] p1;
		String[] p2;
		int p3;
		
		// ----- test 0 -----
		p0 = new String[]{"000","000","000"};
		p1 = new String[]{"ABD","BAC","DCA"};
		p2 = new String[]{"ABD","BAC","DCA"};
		p3 = 3;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"011","101","110"};
		p1 = new String[]{"ABD","BAC","DCA"};
		p2 = new String[]{"ABD","BAC","DCA"};
		p3 = 1;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"011000","101000","110000","000011","000101","000110"};
		p1 = new String[]{"ABDFFF","BACFFF","DCAFFF","FFFABD","FFFBAC","FFFDCA"};
		p2 = new String[]{"ABDFFF","BACFFF","DCAFFF","FFFABD","FFFBAC","FFFDCA"};
		p3 = 7;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"0"};
		p1 = new String[]{"A"};
		p2 = new String[]{"A"};
		p3 = 0;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new String[]{"0001","0001","0001","1110"};
		p1 = new String[]{"AfOj","fAcC","OcAP","jCPA"};
		p2 = new String[]{"AWFH","WAxU","FxAV","HUVA"};
		p3 = 0;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new String[]{"0000000000","0000000011","0001010000","0010010000","0000001000","0011000000","0000100000","0000000011","0100000101","0100000110"};
		p1 = new String[]{"AhPEqkSFMM","hAfKPtsDad","PfAyGQkaqN","EKyAeLpRpm","qPGeASfNwo","ktQLSAnCAK","SskpfnAdJS","FDaRNCdAZz","MaqpwAJZAn","MdNmoKSznA"};
		p2 = new String[]{"AgTqWWxEYH","gAXPgjzIRA","TXAleTmWvT","qPlAQkwxRO","WgeQAqgbJJ","WjTkqAiTzl","xzmwgiAuHb","EIWxbTuAwk","YRvRJzHwAn","HATOJlbknA"};
		p3 = 65;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}

class Edge implements Comparable<Edge> {

	int v;
	int w;
	int val;
	
	public Edge(int v, int w, int val) {
	
		this.v = v;
		this.w = w;
		this.val = val;
	
	}
	
	public int either() {
		return v;
	}
	
	public int other(int i) {
		if (i == v)
			return w;
		else
			return v;
	}
	
	public int compareTo(Edge e) {
	
		if (this.val < e.val)
			return -1;
		else if (this.val == e.val)
			return 0;
		else
			return 1;
	
	}


}

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
