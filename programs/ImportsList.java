import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class ImportsList
{
	public boolean marked[];
	public int count[];
	public int N;
	
	public int[] importsCount(String[] requires)
	{
		int i, j;
		int ans[];
		N = requires.length;
		ans = new int[N];
		
		for (i = 0; i < N; i++) {
		
			marked = new boolean[N];
			count = new int[N];
		
			dfs(requires, i);
			
			for (j = 0; j < N; j++) {
			
				if (requires[i].charAt(j) == 'Y' && count[j] == 1)
					ans[i]++;
			
			}
			
		}
		
		
		return ans;
	}
	
	public void dfs(String[] requires, int v) {
	
		int i;
		
//		System.out.println("v = " + v);
		
		if (marked[v]) {
			count[v]++;
			return;		
		}
		
		marked[v] = true;
		count[v]++;
	
		for (i = 0; i < N; i++) {
		
			if (requires[v].charAt(i) == 'Y')
				dfs(requires, i);
		
		}
	
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int[] p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		ImportsList obj;
		int[] answer;
		obj = new ImportsList();
		long startTime = System.currentTimeMillis();
		answer = obj.importsCount(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p1.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(p1[i]);
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(answer[i]);
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p1.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (answer[i] != p1[i]) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		int[] p1;
		
		// ----- test 0 -----
		p0 = new String[]{"NNN","NNN","NNN"};
		p1 = new int[]{0,0,0};
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"NYYY","NNYY","NNNY","NNNN"};
		p1 = new int[]{1,1,1,0};
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"NNNNY","NNNNY","YNNNY","NNNNN","NNNNN"};
		p1 = new int[]{1,1,1,0,0};
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"NYYNYNYYYNYYNYNN","NNNNNNNNNNNNNNNN","NNNNNNNNNNYNNNNN","NNNNNNNNNYNNYNNN","NYNNNNYNNNYYNNNN","NYNNYNYNYNYYNNNN","NNNNNNNNNNYNNNNN","NNYNNNYNYNYNNNNN","NNNNNNYNNNYNNNNN","NNNNNNNNNNNNYNNN","NNNNNNNNNNNNNNNN","NNNNNNNNNNNNNNNN","NNNNNNNNNNNNNNNN","NNNNNNYNNNYNNNNN","YYYYYNYYYYYYYYNY","NYYYNNYNNYYNYYNN"};
		p1 = new int[]{3,0,1,1,3,2,1,2,1,1,0,0,0,1,2,4};
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
