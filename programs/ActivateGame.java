import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;

// Apply Lazy Prim's algorithm and find Maximum Spanning Tree

public class ActivateGame
{
	public String [] sGrid;
	public int M;
	public int N;
	public int V;
	public Queue<Edge> pq;
	public Queue<Edge> mst;
	public boolean marked[];
	public static int dx[] = new int[] {0, 1, 0, -1};
	public static int dy[] = new int[] {1, 0, -1, 0};
	
	public int findMaxScore(String[] grid)
	{
		int i;
		int v;
		int w;
		int score;
		Edge edge;
		
		M = grid.length;
		N = grid[0].length();
		
		V = M * N;
		
		marked = new boolean[V];
		
		score = 0;
		sGrid = grid;
		
//		for (String str: sGrid)
//			System.out.println(str);

		System.out.println("V = " + V);

		pq = new PriorityQueue<Edge>(V, new PQComparator());
		mst = new PriorityQueue<Edge>();
		
		visit(0, 0);
		
		while (mst.size() < V && !pq.isEmpty()) {
		
			edge = pq.remove();
			v = edge.v;
			w = edge.w;
			
//			System.out.println("(" + (v / M) + "," + (v % M) + ") -> (" + (w / M) + "," + (w % M) + "); WEIGHT: " + edge.weight);
			
			if (marked[v] && marked[w])
				continue;
				
			mst.add(edge);
			
			if (!marked[v])
				visit(v / N, v % N);
				
			if (!marked[w])
				visit(w / N, w % N);
			
		}
		
		score = 0;
		
//		System.out.println("PQ empty: " + pq.isEmpty() + "; MST size: " + mst.size());
		
		for (Edge e: mst) {
			v = e.v;
			w = e.w;
//			System.out.println("(" + (v / M) + "," + (v % M) + ") -> (" + (w / M) + "," + (w % M) + "); weight: " + e.weight);
			score += e.weight;
		
		}
		
//		score = visit(0, 0);
		
		return score;
	}
	
	public void visit(int i, int j) {
	
		int p, q;
		int score;
		int source;
		int dest;
		int temp;
		int k;
		Edge edge;
		
		marked[N * i + j] = true;
		
		
		for (k = 0; k < dx.length; k++) {
		
//			System.out.println("Temp score");
			p = i + dx[k];
			q = j + dy[k];
			
			if (!checkValidIndex(p, q))
				continue;
				
//			if (marked[p * M + q])
//				continue;
			
//			System.out.println("(" + i + "," + j + ") -> (" + p + "," + q + "): ");
			
			temp =  Math.abs(findScore(p, q) - findScore(i, j));
			
			
			
			source = i * N + j;
			dest = p * N + q;
			
			edge = new Edge(source, dest, temp);
			
			pq.add(edge);
			
		}
	
	}

	
	public int findScore(int i, int j) {
		
		int score;
		
		if ((score = sGrid[i].charAt(j) - '0') <= 9)
			return score;
		
		score = sGrid[i].charAt(j) - 'a';
		
		if (score >= 0 && score <= 25)
			return score + 10;
		
		
		return (sGrid[i].charAt(j) - 'A' + 36);
	
	}
	
	public boolean checkValidIndex(int i, int j) {
	
		if (i < 0 || i >= M || j < 0 || j >= N)
			return false;
			
		return true;
	
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		ActivateGame obj;
		int answer;
		obj = new ActivateGame();
		long startTime = System.currentTimeMillis();
		answer = obj.findMaxScore(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		int p1;
		
		// ----- test 0 -----
		p0 = new String[]{"05","aB"};
		p1 = 69;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"03","21"};
		p1 = 7;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"John","Brus","Gogo"};
		p1 = 118;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"AAA","AAA","AAA"};
		p1 = 0;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}

class PQComparator implements Comparator<Edge> {

	@Override
	public int compare(Edge arg0, Edge arg1) {
	
		if (arg0.weight < arg1.weight)
			return 1;
		else if (arg0.weight == arg1.weight)
			return 0;
		return -1;	
	}

}

class Edge implements Comparable<Edge> {

	int v;
	int w;
	int weight;
	
	public Edge(int v, int w, int weight) {
		this.v = v;
		this.w = w;
		this.weight = weight;
	}
	
	@Override
	public int compareTo(Edge arg0) {
	
		if (this.weight < arg0.weight)
			return 1;
		else if (this.weight == arg0.weight)
			return 0;
		return -1;
	
	}

}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
