import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;

// NP Hard problem. Find all paths between a source and destination by marking and unmarking nodes as we visit and backtrack from a node.
public class GreedyGovernment
{
	public boolean marked[];
	public int road[][];
	public int N;
	public int paths;
	public int total;
	
	
	public double maxAverageCost(String[] tolls, int tollHike)
	{
		int i, j;
		Ret ret;
		int maxPath;
		
		N = tolls.length;
		paths = 0;
		total = 0;
		road = new int[N][N];
		
		marked = new boolean[N];
		
//		marked[0] = true;
		
		ret = dfs(tolls, 0, 0);
		
//		System.out.println("n = " + ret.n + "; sum = " + ret.sum);
	/*	
		for (i = 0; i < N; i++) {
			for (j = 0; j < N; j++) {
				System.out.print(road[i][j] + " ");
			}
			System.out.println();
		}
	*/	
		maxPath = findMax();
		
		if (maxPath == 0)
			return 0;
		
		
		return (ret.sum + maxPath * tollHike) * 1.0 / (1.0 * ret.n);
		
			
	}
	
	public int findMax() {
	
		int i, j;
		int max = Integer.MIN_VALUE;
		
		for (i = 0; i < N; i++) {
			for (j = 0; j < N; j++) {
				max = Math.max(max, road[i][j]);
			}
		}
		
		return max;
	
	}
	
	public Ret dfs(String [] tolls, int v, int w) {
	
		int i, j;
		int n;
		Ret ret, temp;
		boolean status = false;
		
		if (w == N - 1) {
	//		road[v][w]++;
			paths++;
			return new Ret(1, 0);
		}
		n = 0;
		
		marked[w] = true;
		ret = new Ret();
		
		for (i = 1; i < N; i++) {
		
			if (!marked[i] && tolls[w].charAt(i) != 'X') {
				temp = dfs(tolls, w, i);
				if (temp.n != 0) {
					ret.n += temp.n;
					ret.sum += ((tolls[w].charAt(i) - '0') * temp.n + temp.sum);
					road[w][i] += temp.n;		
				}
			}
		
		}
		
		marked[w] = false;
		
		return ret;
	
	}
	
	private class Ret {
		int n;
		int sum;
		
		public Ret() {
			n = 0;
			sum = 0;
		}
		
		public Ret(int n, int sum) {
			this.n = n;
			this.sum = sum;
		}
	
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, int p1, boolean hasAnswer, double p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}" + "," + p1);
		System.out.println("]");
		GreedyGovernment obj;
		double answer;
		obj = new GreedyGovernment();
		long startTime = System.currentTimeMillis();
		answer = obj.maxAverageCost(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = Math.abs(p2 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p2));
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		int p1;
		double p2;
		
		// ----- test 0 -----
		p0 = new String[]{"X324","XXX2","12X5","991X"};
		p1 = 9;
		p2 = 10.0D;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"X324","5X22","12X5","991X"};
		p1 = 57;
		p2 = 29.2D;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"X11","2X1","37X"};
		p1 = 76;
		p2 = 39.5D;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"X32X","XXXX","XXXX","XXXX"};
		p1 = 99;
		p2 = 0.0D;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
