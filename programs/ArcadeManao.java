import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class ArcadeManao
{
	boolean marked[][];
	int N, M;
	
	public int shortestLadder(String[] level, int coinRow, int coinColumn)
	{
		int k;
		int ladder;
		
		N = level.length;
		M = level[0].length();
		
		if (coinRow == N)
			return 0;
			
		k = N - coinRow;
		
		for (ladder = 1; ladder < k; ladder++) {
			marked = new boolean[N][M];
			
//			System.out.println("Ladder length: " + ladder);

			if (dfs(level, coinRow - 1, coinColumn - 1, ladder))
				break;
			
		}
			
		return ladder;
	}
	
	public boolean dfs(String [] level, int row, int col, int k) {
	
		int i, j;
		boolean reached = false;
		
		marked[row][col] = true;
		
	//	System.out.println("row, col = " + row + ", " + col);
		
		if (row == N - 1)
			return true;
			
		i = row;
		j = col;
		
		while (j >= 0 ) {
		
			for (int ladder = 1; ladder <= k; ladder++) {
			
				if (row >= 0 && row + ladder < N && level[row].charAt(j) == 'X' && level[row + ladder].charAt(j) == 'X' && !marked[row + ladder][j]) {
					reached = dfs(level, row + ladder, j, k);
					if (reached)
						return reached;
				}
				if (row < N && row - ladder >= 0 && level[row].charAt(j) == 'X' && level[row - ladder].charAt(j) == 'X' && !marked[row - ladder][j]) {
					reached = dfs(level, row - ladder, j, k);
					if (reached)
						return reached;
				}
			
			}
			
			j--;		
		}
		
		j = col + 1;
		
		while (j < M) {
		
			for (int ladder = 1; ladder <= k; ladder++) {
			
				if (row >= 0 && row + ladder < N && level[row].charAt(j) == 'X' && level[row + ladder].charAt(j) == 'X' && !marked[row + ladder][j]) {
					reached = dfs(level, row + ladder, j, k);
					if (reached)
						return reached;
				}
				if (row < N && row - ladder >= 0 && level[row].charAt(j) == 'X' && level[row - ladder].charAt(j) == 'X' && !marked[row - ladder][j]) {
					reached = dfs(level, row - ladder, j, k);
					if (reached)
						return reached;
				}
			}
			
			j++;		
		}
		
	
		return false;
	}	

			// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, int p1, int p2, boolean hasAnswer, int p3) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}" + "," + p1 + "," + p2);
		System.out.println("]");
		ArcadeManao obj;
		int answer;
		obj = new ArcadeManao();
		long startTime = System.currentTimeMillis();
		answer = obj.shortestLadder(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		int p1;
		int p2;
		int p3;
		
		// ----- test 0 -----
		p0 = new String[]{"XXXX....","...X.XXX","XXX..X..","......X.","XXXXXXXX"};
		p1 = 2;
		p2 = 4;
		p3 = 2;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"XXXX","...X","XXXX"};
		p1 = 1;
		p2 = 1;
		p3 = 1;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"..X..",".X.X.","X...X",".X.X.","..X..","XXXXX"};
		p1 = 1;
		p2 = 3;
		p3 = 4;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"X"};
		p1 = 1;
		p2 = 1;
		p3 = 0;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new String[]{"XXXXXXXXXX","...X......","XXX.......","X.....XXXX","..XXXXX..X",".........X",".........X","XXXXXXXXXX"};
		p1 = 1;
		p2 = 1;
		p3 = 2;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING

}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
