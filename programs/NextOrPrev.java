import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class NextOrPrev
{
	public int getMinimum(int nextCost, int prevCost, String start, String goal)
	{
		int i, j;
		int N;
		Alpha alpha[];
		int count = 0;
		
		N = start.length();
		
		alpha = new Alpha[N];
		
		for (i = 0; i < N; i++) {
			alpha[i] = new Alpha(start.charAt(i), goal.charAt(i));
		}
		
		Arrays.sort(alpha);
		/*
		for (i = 0; i < N; i++) {
		
			System.out.println("start = " + alpha[i].start + "; end = " + alpha[i].end);
		
		}
		*/
		
		for (i = 0; i < N; i++) {
		
			if (i == N - 1 || alpha[i].end <= alpha[i + 1].end) {
			
				if (alpha[i].start > alpha[i].end) {
				
					count += ( (alpha[i].start - alpha[i].end) * prevCost);
				
				} else {
				
					count += ( (alpha[i].end - alpha[i].start) * nextCost);				
				}
			
			} else {
				return -1;
			}
		
		}		
		
		return count;
		
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, String p2, String p3, boolean hasAnswer, int p4) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + "\"" + p2 + "\"" + "," + "\"" + p3 + "\"");
		System.out.println("]");
		NextOrPrev obj;
		int answer;
		obj = new NextOrPrev();
		long startTime = System.currentTimeMillis();
		answer = obj.getMinimum(p0, p1, p2, p3);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p4);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p4;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		String p2;
		String p3;
		int p4;
		
		// ----- test 0 -----
		p0 = 5;
		p1 = 8;
		p2 = "ae";
		p3 = "bc";
		p4 = 21;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 5;
		p1 = 8;
		p2 = "ae";
		p3 = "cb";
		p4 = -1;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 1;
		p1 = 1;
		p2 = "srm";
		p3 = "srm";
		p4 = 0;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 10;
		p1 = 1;
		p2 = "acb";
		p3 = "bdc";
		p4 = 30;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 10;
		p1 = 1;
		p2 = "zyxw";
		p3 = "vuts";
		p4 = 16;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = 563;
		p1 = 440;
		p2 = "ptrbgcnlaizo";
		p3 = "rtscedkiahul";
		p4 = 10295;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 6 -----
		p0 = 126;
		p1 = 311;
		p2 = "yovlkwpjgsna";
		p3 = "zpwnkytjisob";
		p4 = -1;
		all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}


class Alpha implements Comparable<Alpha> {

	char start;
	char end;
	
	public Alpha(char start, char end) {

		this.start = start;
		this.end = end;	
	
	}
	
	@Override
	public int compareTo(Alpha a) {
	
		if (start < a.start)
			return -1;
		if (start > a.start)
			return 1;
			
		return 0;
	
	}


}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
