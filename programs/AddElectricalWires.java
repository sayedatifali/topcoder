import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class AddElectricalWires
{
	public int N;
	public int grid;
	public int connected[];
	
	public int maxNewWires(String[] wires, int[] gridConnections)
	{
		int i, j;
		char [][] str;
		
		N = wires.length;
		str = new char[N][N];
		connected = new int[N];
		
		for (i = 0; i < N; i++) {
			connected[i] = i;
		}
		
		Arrays.sort(gridConnections);
		
		for (i = 0; i < gridConnections.length; i++) {
			j = gridConnections[i];
			connected[j] = gridConnections[0];
		}
		grid = gridConnections[0];
		
		for (i = 0; i < N; i++) {
			System.out.print(connected[i] + " ");
		}
				
		for (i = 0; i < N; i++) {
			for (j = 0; j < N; j++) {
				if (wires[i].charAt(j) == '1') {
					str[i][j] = '1';
					connect(i, j);
				}
			}		
		}
		
		for (i = 0; i < gridConnections.length; i++) {
		
			j = gridConnections[i];
			connect[
		
		}
		
		for (i = 0; i < N; i++) {
			for (j = 0; j < N; j++) {
				if (i == j)
					continue;
					
				if (wires[i].charAt(j) == '0') {
				
									
				}			
			}
		}
		
		return 0;
	}
	
	public void connect(int i, int j) {
	
		for (int p = 0; p < N; p++) {
			if(connected[p] == j)
				connected[p] = connected[i];		
		}
	
	}
	
	public boolean isConnected(int i, int j)
	{
		return connected[i] == connected[j];
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, int[] p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		AddElectricalWires obj;
		int answer;
		obj = new AddElectricalWires();
		long startTime = System.currentTimeMillis();
		answer = obj.maxNewWires(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		int[] p1;
		int p2;
		
		// ----- test 0 -----
		p0 = new String[]{"000","000","000"};
		p1 = new int[]{0};
		p2 = 3;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"000","000","000"};
		p1 = new int[]{0,1};
		p2 = 1;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"01","10"};
		p1 = new int[]{0};
		p2 = 0;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"00000","00000","00000","00000","00000"};
		p1 = new int[]{0,1,2,3,4};
		p2 = 0;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new String[]{"01000","10100","01010","00100","00000"};
		p1 = new int[]{2,4};
		p2 = 3;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}

class Graph {

	private final int V;
	private Bag<Integer>[] adj;
	
	public Graph(int v) {
		this.V = v;
		adj = (Bag<Integer>[]) new Bag[v];
		for (int i = 0; i < v; i++) {
			adj[i] = new Bag<Integer>();
		}
	}
	
	public void addEdge(int v, int w) {
		adj[v].add(w);
		adj[w].add(v);
	}
	
	public int V() {
		return V;
	}
	
	public Iterable<Integer> adj(int v) {
		return adj[v];
	}
}

class Bag<Item> implements Iterable<Item> {

	private Node first;
	private int N;

	private class Node {
		private Item item;
		private Node next;
	}

	public Bag() {
		first = null;
		N = 0;
	}

	public void add(Item w) {
		Node oldfirst = first;
		first = new Node();
		first.item = w;
		first.next = oldfirst;
		N++;
	}

	public boolean isEmpty() {
		return first == null;
	}

	@Override
	public Iterator<Item> iterator() {
		// TODO Auto-generated method stub
		return new ListIterator();
	}

	private class ListIterator implements Iterator<Item> {
		private Node current = first;

		@Override
		public boolean hasNext() {
			// TODO Auto-generated method stub
			return current != null;
		}

		@Override
		public Item next() {
			// TODO Auto-generated method stub
			if (!hasNext())
				throw new NoSuchElementException();
			Item item = current.item;
			current = current.next;
			return item;
		}

		@Override
		public void remove() {
			// TODO Auto-generated method stub
			throw new UnsupportedOperationException();
		}
	}
}

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
