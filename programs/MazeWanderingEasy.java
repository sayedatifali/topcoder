import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class MazeWanderingEasy
{
	boolean marked[][];
	int decisions;
	
	public int decisions(String[] maze)
	{
		int i, j;
		int N, M;
		N = maze.length;
		M = maze[0].length();
		decisions = 0;
		
		marked = new boolean[N][M];
		
		for (i = 0; i < N; i++) {
			for (j = 0; j < M; j++) {
				if (maze[i].charAt(j) == 'M') {
					marked[i][j] = true;
					dfs(maze, i, j, N, M);
					break;
				}
			}
		}
		
			
		return decisions;	
		
	}
	
	public boolean dfs(String [] maze, int row, int col, int N, int M) {
	
		boolean left, right, up, down, found = false;
		int dec = 0;
		left = right = up = down = false;
		
		marked[row][col] = true;
		
//		System.out.println("(row, col) = " + "(" + row + ", " + col + ")");
		
		if (col > 0 && !marked[row][col - 1]) {
			if (maze[row].charAt(col - 1) == '.') {
				left = dfs(maze, row, col - 1, N, M);
				dec++;	
			}
			else if (maze[row].charAt(col - 1) == '*') {
				dec++;
				found = true;
			}
		}
		if (col < M - 1 && !marked[row][col + 1]) {
			if (maze[row].charAt(col + 1) == '.') {
				right = dfs(maze, row, col + 1, N, M);
				dec++;	
			}
			else if (maze[row].charAt(col + 1) == '*') {
				dec++;
				found = true;
			}
		}
		if (row > 0 && !marked[row - 1][col]) {
			if (maze[row - 1].charAt(col) == '.') {
				up = dfs(maze, row - 1, col, N, M);
				dec++;	
			}
			else if (maze[row - 1].charAt(col) == '*') {
				dec++;
				found = true;
			}
		}
		if (row < N - 1 && !marked[row + 1][col]) {
			if (maze[row + 1].charAt(col) == '.') {
				down = dfs(maze, row + 1, col, N, M);
				dec++;	
			}
			else if (maze[row + 1].charAt(col) == '*') {
				dec++;
				found = true;
			}
		}
		
		if (dec > 1 && (found || left || right || up || down))
			decisions++;
		
		return (found || left || right || up || down);
	
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		MazeWanderingEasy obj;
		int answer;
		obj = new MazeWanderingEasy();
		long startTime = System.currentTimeMillis();
		answer = obj.decisions(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		int p1;
		
		// ----- test 0 -----
		p0 = new String[]{"*.M"};
		p1 = 0;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"*.M",".X."};
		p1 = 1;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"...","XMX","..*"};
		p1 = 2;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{".X.X......X",".X*.X.XXX.X",".XX.X.XM...","......XXXX."};
		p1 = 3;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new String[]{"..........*",".XXXXXXXXXX","...........","XXXXXXXXXX.","M.........."};
		p1 = 0;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
