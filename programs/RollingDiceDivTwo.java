import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class RollingDiceDivTwo
{
	public int minimumFaces(String[] rolls)
	{
		int i;
		int j;
		int [][] thro;
		int minFace = 0;
		int N;
		int M;
		int max;
		
		M = rolls.length;
		N = rolls[0].length();
		thro = new int[M][N];
		
		for (i = 0; i < M; i++) {
		
			for (j = 0; j < N; j++) {
			
				thro[i][j] = rolls[i].charAt(j) - '0';
			
			}
			
			Arrays.sort(thro[i]);
			
	//		for (int k = 0; k < N; k++)
	//			System.out.print(thro[i][k] + " ");
			
	//		System.out.println();
		
		}
		
		for (i = 0; i < N; i++) {
		
			max = 0;
			
			for (j = 0; j < M; j++) {
		
				max = Math.max(max, thro[j][i]);		
			
			}
			
			minFace += max;
			
		}
		
		
		return minFace;
		
		
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		RollingDiceDivTwo obj;
		int answer;
		obj = new RollingDiceDivTwo();
		long startTime = System.currentTimeMillis();
		answer = obj.minimumFaces(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		int p1;
		
		// ----- test 0 -----
		p0 = new String[]{"137","364","115","724"};
		p1 = 14;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"1112","1111","1211","1111"};
		p1 = 5;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"24412","56316","66666","45625"};
		p1 = 30;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"931","821","156","512","129","358","555"};
		p1 = 19;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new String[]{"3","7","4","2","4"};
		p1 = 7;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new String[]{"281868247265686571829977999522","611464285871136563343229916655","716739845311113736768779647392","779122814312329463718383927626","571573431548647653632439431183","547362375338962625957869719518","539263489892486347713288936885","417131347396232733384379841536"};
		p1 = 176;
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
