import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class SRMCodingPhase
{
	public int countScore(int[] points, int[] skills, int luck)
	{
		//Brute Force Method
		int i;
		int j;
		int k;
		int N;
		int mask;
		int m[] = {2, 4, 8};
		int p[];
		int totalCount;
		int max = 0;
		int total = 0;
		
		int a = 0, b = 0, c = 0;
		
		for (i = 0; i <= luck; i++) {
		
			for (j = 0; i + j <= luck; j++) {
			
				for (k = 0; i + j + k <= luck; k++) {
					
					p = new int[]{skills[0] - i, skills[1] - j, skills[2] - k};
					
					for (mask = 0; mask < (1 << 3); mask++) {
					
						totalCount = 0;
						total = 0;
						
						for (int q = 0; q < 3; q++) {
						
							if (p[q] <= 0)
								continue;
						
							if (((1 << q) & mask) > 0) {
							
								totalCount += points[q] - m[q] * p[q];
								total += p[q];
								
							//	System.out.println("q & mask: " + (q & mask));
							}
							
							if (total > 75)
								break;
							
							if (totalCount > max) {
								a = i; b = j; c = k;
							}
							max = Math.max(totalCount, max);
						}
					}				
				
				}
			}
		}
		
		System.out.println("a = " + a + "; b = " + b + "; c = " + c);		
		return max;
		
	}
	
	
	public int oldCountScore(int [] points, int [] skills, int luck) {
	
		int i;
		int j;
		int N;
		int index;
		int max;
		int temp;
		int t;
		int luckSub;
		int mul[] = {2, 4, 8};
		int countScore = 0;
		int totTime = 0;
		int tMax = 0;
		
		N = points.length;
		
		
		for (i = 0; i < N; i++) {
			
			index = -1;
			max = 0;
			luckSub = 0;
			
			if (luck <= 0)
				break;
		
			for (j = N - 1; j >= 0; j--) {
			
				if (totTime + skills[j] - luck > 75 || skills[j] == 0)
					continue;
				
				if (skills[j] - luck > 75) {
					t = 0;
					temp = 0;
				} else if (skills[j] - luck > 0) {
				
					if (skills[j] > 75) {
						t = 75 - skills[j] + luck; // [ 75 - (x - luck) ]
						temp = luck;
					} else {
						t = luck;
						temp = luck;					
					}
				
				} else {
					t = skills[j] - 1;
					temp = t;				
				}
				
				if (points[j] - skills[j] * mul[j] + mul[j] * temp > max) {
				
					max = points[j] - skills[j] * mul[j] + mul[j] * temp;
					index = j;
					luckSub = temp;
					tMax = t;
					
			//		System.out.println("max = " + max);
				}
			}
			
			if (index != -1) {
				luck -= luckSub;
				countScore += points[index] - skills[index] * mul[index] + luckSub * mul[index];
				points[index] = 0;
				totTime += skills[index] - luckSub;
				skills[index] = 0;
			}
//			System.out.println("i = " + i + "; Count score = " + countScore);
		}
		
//		System.out.println("Initial countScore = " + countScore);
		
		for (i = N - 1; i >= 0; i--) {
		
			if (totTime + skills[i] > 75)
				continue;
			countScore += (points[i] - mul[i] * skills[i]);
			totTime += skills[i];
			
		}
		
		return countScore;
	
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, int p2, boolean hasAnswer, int p3) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}" + "," + p2);
		System.out.println("]");
		SRMCodingPhase obj;
		int answer;
		obj = new SRMCodingPhase();
		long startTime = System.currentTimeMillis();
		answer = obj.countScore(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int[] p1;
		int p2;
		int p3;
		
		// ----- test 0 -----
		p0 = new int[]{250,500,1000};
		p1 = new int[]{10,25,40};
		p2 = 0;
		p3 = 1310;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{300,600,900};
		p1 = new int[]{30,65,90};
		p2 = 25;
		p3 = 680;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{250,550,950};
		p1 = new int[]{10,25,40};
		p2 = 75;
		p3 = 1736;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{256,512,1024};
		p1 = new int[]{35,30,25};
		p2 = 0;
		p3 = 1216;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{300,600,1100};
		p1 = new int[]{80,90,100};
		p2 = 4;
		p3 = 0;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
