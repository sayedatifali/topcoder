import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class ErdosNumber
{
	public String[] calculateNumbers(String[] publications)
	{
		int N;
		int i, j, k;
		Graph G;
		int v, w;
		int g;
		String s;
		StringTokenizer st;
		HashMap<String, Boolean> map = new HashMap<String, Boolean>();
		ArrayList<String> names = new ArrayList<String>();
		
		N = publications.length;
		j = 0;
		G = new Graph(100);
		g = 1;
		
		for (i = 0; i < N; i++) {
		
			st = new StringTokenizer(publications[i]);
			
			while(st.hasMoreTokens()) {
				s = st.nextToken();
				names.add(s);
			}
			
			for (j = 0; j < names.size() - 1; j++) {
			
				for (k = j + 1; k < names.size(); k++) {
					
					s = names.get(i);
					
					map.put(s, false);
					
					if (s.equals("ERDOS")) {
				
					}
				
				}
			}
			
			names.clear();
		
		}
		
		
		return new String [] {};
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, String[] p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		ErdosNumber obj;
		String[] answer;
		obj = new ErdosNumber();
		long startTime = System.currentTimeMillis();
		answer = obj.calculateNumbers(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p1.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print("\"" + p1[i] + "\"");
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + answer[i] + "\"");
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p1.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (!answer[i].equals(p1[i])) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		String[] p1;
		
		// ----- test 0 -----
		p0 = new String[]{"ERDOS"};
		p1 = new String[]{"ERDOS 0"};
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"KLEITMAN LANDER","ERDOS KLEITMAN"};
		p1 = new String[]{"ERDOS 0","KLEITMAN 1","LANDER 2"};
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"ERDOS A","A B","B AA C"};
		p1 = new String[]{"A 1","AA 3","B 2","C 3","ERDOS 0"};
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"ERDOS B","A B C","B A E","D F"};
		p1 = new String[]{"A 2","B 1","C 2","D","E 2","ERDOS 0","F"};
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new String[]{"ERDOS KLEITMAN","CHUNG GODDARD KLEITMAN WAYNE","WAYNE GODDARD KLEITMAN","ALON KLEITMAN","DEAN GODDARD WAYNE KLEITMAN STURTEVANT"};
		p1 = new String[]{"ALON 2","CHUNG 2","DEAN 2","ERDOS 0","GODDARD 2","KLEITMAN 1","STURTEVANT 2","WAYNE 2"};
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}

class Graph {

	private final int V;
	private ArrayList<ArrayList<String>> adj;
	
	public Graph(int v) {
		this.V = v;
		adj = new ArrayList<ArrayList<String>> ();
		for (int i = 0; i < v; i++) {
			adj.add(i, new ArrayList<String>());
		}
	}
	
	public void addEdge(int v, int w) {
		adj.get(v).add(w);
		adj.get(w).add(v);
	}
	
	public int V() {
		return V;
	}
	
	public Iterable<String> adj(int v) {
		return adj.get(v);
	}

}

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
