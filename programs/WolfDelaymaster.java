import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class WolfDelaymaster
{

	public static HashSet<Character> sHashSet;
	
	public String check(String str)
	{
		
		int index;
		
		index = 0;
		
		sHashSet =  new HashSet<Character>();
		
		while (index < str.length()) {
			index = nextPatternIndex(index, str);
			if (index == -1)
				return "INVALID";
			
		}
		
			
		return "VALID";
			
	}
	
	
	public int nextPatternIndex(int startIndex, String str) {
	
		int i;
		int j;
		int n = 1;
		int count = 1;
		int next = 0;
		int temp;
		int hashSize;
		int index;
		
		i = startIndex + 1;
		
		System.out.println("startIndex = " + startIndex);
		
		while (str.charAt(i) == str.charAt(startIndex)) {
			n++;
			i++;
		}
		
		if (startIndex == 0) {
		
			sHashSet.add(str.charAt(startIndex));
			

	//		System.out.println("i = " + i + ", n = " + n);
			
	//		System.out.println("hash contains : " + sHashSet.contains(str.charAt(i)));
			
			while (i < str.length() && !sHashSet.contains(str.charAt(i))) {

	//			System.out.println("Start Index 0");
									
				sHashSet.add(str.charAt(i));
				
				count = 1;
				temp = i + 1;
				
				while (temp < str.length() && str.charAt(i) == str.charAt(temp)) {
					count++;
					temp++;
				}
					
				if (n != count)
					return -1;
					
				i = temp;
				
			//	System.out.println("i = " + i);
			
			}
			
			return i;
		
		}
		
		else {
		
			hashSize = sHashSet.size();
		
			if (!sHashSet.contains(str.charAt(startIndex)))
				return -1;
			
			index = startIndex;
			
			for (i = 0; i < hashSize; i++) {
			
				for (j = 0; j < n; j++) {
				
					index = startIndex + n * i + j;
										
					if (index >= str.length())
						return -1;
						
					if (str.charAt(index) != str.charAt(startIndex + n * i))
						return -1;
					
					if (!sHashSet.contains(str.charAt(index)))
						return -1; 
				
				}
			
			}
		
			return index + 1;
		
		}
		
	
	
	
	}
	
		// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, String p1) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"");
		System.out.println("]");
		WolfDelaymaster obj;
		String answer;
		obj = new WolfDelaymaster();
		long startTime = System.currentTimeMillis();
		answer = obj.check(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p1 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p1);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String p0;
		String p1;
		
		// ----- test 0 -----
		p0 = "wolf";
		p1 = "VALID";
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = "wwolfolf";
		p1 = "INVALID";
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = "wolfwwoollffwwwooolllfffwwwwoooollllffff";
		p1 = "VALID";
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = "flowolf";
		p1 = "INVALID";
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING

}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
