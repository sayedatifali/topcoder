import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class LightsCube
{
	public int light[][][];
	public boolean color[][][];
	public int x[], y[], z[];
	public int[] count;
	public int N;
	
	public int[] count(int N, String[] lights)
	{
		int i, j, k;
		int len;
		StringTokenizer st;
		light = new int[N][N][N];
		color = new boolean[N][N][N];
		
		len = lights.length;
		count = new int[len];
		x = new int[len];
		y = new int[len];
		z = new int[len];
		this.N = N;
		
		for (i = 0; i < N; i++) {
			for (j = 0; j < N; j++) {
				for (k = 0; k < N; k++) {
					light[i][j][k] = -1;
				}
			}
		}
		
		for (i = 0; i < len; i++) {
			st = new StringTokenizer(lights[i]);
			x[i] = Integer.parseInt(st.nextToken());
			y[i] = Integer.parseInt(st.nextToken());
			z[i] = Integer.parseInt(st.nextToken());
			setLights(x[i], y[i], z[i], i);
		}
		finalizeColor();		
		
		getCount();
		
		for (i = 0; i < N; i++) {
			for (j = 0; j < N; j++) {
				for (k = 0; k < N; k++) {
					count[light[i][j][k]]++;
				}
			}
		}
		
		return count;
	}
	
	public void finalizeColor() {
		int i, j, k;
		
		for (i = 0; i < N; i++) {
			for (j = 0; j < N; j++) {
				for (k = 0; k < N; k++) {
					if (light[i][j][k] != -1)
						color[i][j][k] = true;;
				}
			}
		}
	}
	
	public void setLights(int x, int y, int z, int l) {
		if (x < 0 || y < 0 || z < 0 || x >= N || y >= N || z >= N)
			return;
		if (light[x][y][z] != -1 && l > light[x][y][z])
			return;
		if (color[x][y][z])
			return;
		light[x][y][z] = l;
	//	System.out.println("light["+ x + "][" + y + "][" + z + "] = " + light[x][y][z]);
	}
	
	public void setAdjLights(int x, int y, int z, int l) {
	
		setLights(x - 1, y, z, l);
		setLights(x + 1, y, z, l);
		setLights(x, y - 1, z, l);
		setLights(x, y + 1, z, l);
		setLights(x, y, z - 1, l);
		setLights(x, y, z + 1, l);
	
	}
	
	public void getCount() {
		int i, j, k;
		int templight[][][];
		boolean repeat = false;
		
		templight = new int[N][N][N];
		
		do {
		
			repeat = false;
					
			for (i = 0; i < N; i++) {
				for (j = 0; j < N; j++) {
					for (k = 0; k < N; k++) {
						templight[i][j][k] = light[i][j][k];
					}
				}
			}
			
			
			for (i = 0; i < N; i++) {
				for (j = 0; j < N; j++) {
					for (k = 0; k < N; k++) {
						if (templight[i][j][k] != -1) {
							setAdjLights(i, j, k, templight[i][j][k]);	
						} else {
							repeat = true;
						}
					}
				}
			}
			finalizeColor();
			
		} while(repeat);
		
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, String[] p1, boolean hasAnswer, int[] p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p1[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		LightsCube obj;
		int[] answer;
		obj = new LightsCube();
		long startTime = System.currentTimeMillis();
		answer = obj.count(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p2.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(p2[i]);
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(answer[i]);
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p2.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (answer[i] != p2[i]) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		String[] p1;
		int[] p2;
		
		// ----- test 0 -----
		p0 = 2;
		p1 = new String[]{"0 0 0","0 0 1","0 1 0","0 1 1","1 0 0","1 0 1","1 1 0","1 1 1"};
		p2 = new int[]{1,1,1,1,1,1,1,1};
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 3;
		p1 = new String[]{"1 1 1"};
		p2 = new int[]{27};
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 4;
		p1 = new String[]{"0 0 0","3 3 3"};
		p2 = new int[]{32,32};
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 5;
		p1 = new String[]{"0 2 4","2 0 0","3 4 4","4 1 2"};
		p2 = new int[]{38,28,32,27};
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 12;
		p1 = new String[]{"4 7 6","8 0 0","3 2 3","7 7 2","7 5 1","10 11 5","4 9 7","6 1 0","10 1 1","9 7 11","11 3 11","9 0 3","10 2 0"};
		p2 = new int[]{264,18,303,236,105,124,216,44,53,146,126,80,13};
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = 40;
		p1 = new String[]{"29 13 9","4 10 34","11 26 16","2 33 22","27 31 14","36 20 8"};
		p2 = new int[]{14657,12834,12364,5902,12678,5565};
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
