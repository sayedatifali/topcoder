import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class ParallelProgramming
{
	public int V;
	public boolean marked[];
	public int max;
	public int sTime;
	
	public int minTime(int[] time, String[] prec)
	{
		int v, w;
		int i, j;
		DirectedGraph G;
		DirectedCycle dC;
		
		V = time.length;
		G = new DirectedGraph(V);
		marked = new boolean[V];
		
		for (i = 0; i < V; i++) {
			for (j = 0; j < V; j++) {
				if (prec[i].charAt(j) == 'Y')
					G.addEdge(i, j);				
			}
		}
		
		dC = new DirectedCycle(G);
		
		if (dC.hasCycle())
			return -1;
		
		max = Integer.MIN_VALUE;
		sTime = 0;
		
		for (i = 0; i < V; i++) {
	//		if (!marked[i])
				dfs(G, i, time);
		}
		
		return max;
		
	}
	
	public void dfs(DirectedGraph G, int v, int [] time) {
		
		sTime += time[v];
		
		for (int w : G.adj(v)) {
			dfs(G, w, time);
		}
		
		max = Math.max(max, sTime);
		sTime -= time[v];
		
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, String[] p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p1[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		ParallelProgramming obj;
		int answer;
		obj = new ParallelProgramming();
		long startTime = System.currentTimeMillis();
		answer = obj.minTime(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		String[] p1;
		int p2;
		
		// ----- test 0 -----
		p0 = new int[]{150,200,250};
		p1 = new String[]{"NNN","NNN","NNN"};
		p2 = 250;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{150,200,250};
		p1 = new String[]{"NNN","YNN","NNN"};
		p2 = 350;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{150,200,250};
		p1 = new String[]{"NYN","NNY","NNN"};
		p2 = 600;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{150,200,250};
		p1 = new String[]{"NYN","NNY","YNN"};
		p2 = -1;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{345,335,325,350,321,620};
		p1 = new String[]{"NNNNNN","NNYYYY","YNNNNN","NNYNYN","NNNNNN","NNNNNN"};
		p2 = 1355;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}

class Bag<Item> implements Iterable<Item> {

	private Node first;
	private int N;

	private class Node {
		private Item item;
		private Node next;
	}

	public Bag() {
		first = null;
		N = 0;
	}

	public void add(Item w) {
		Node oldfirst = first;
		first = new Node();
		first.item = w;
		first.next = oldfirst;
		N++;
	}

	public boolean isEmpty() {
		return first == null;
	}

	@Override
	public Iterator<Item> iterator() {
		// TODO Auto-generated method stub
		return new ListIterator();
	}

	private class ListIterator implements Iterator<Item> {
		private Node current = first;

		@Override
		public boolean hasNext() {
			// TODO Auto-generated method stub
			return current != null;
		}

		@Override
		public Item next() {
			// TODO Auto-generated method stub
			if (!hasNext())
				throw new NoSuchElementException();
			Item item = current.item;
			current = current.next;
			return item;
		}

		@Override
		public void remove() {
			// TODO Auto-generated method stub
			throw new UnsupportedOperationException();
		}
	}
}

class DirectedGraph {
	private Bag<Integer>[] adj;
	private final int V;

	public DirectedGraph(int V) {
		this.V = V;
		adj = (Bag<Integer>[]) new Bag[V];
		for (int i = 0; i < V; i++) {
			adj[i] = new Bag<Integer>();
		}
	}

	public void addEdge(int v, int w) {
		adj[v].add(w);
	}

	public int V() {
		return V;
	}

	public Iterable<Integer> adj(int v) {
		return adj[v];
	}

	public DirectedGraph reverse() {
		DirectedGraph Greverse;

		Greverse = new DirectedGraph(V);

		for (int v = 0; v < this.V; v++) {
			for (int w : adj[v]) {
				Greverse.addEdge(w, v);
			}
		}

		return Greverse;
	}
}

class DirectedCycle {

	private boolean[] marked;
	private int[] edgeTo;
	private Stack<Integer> cycle;
	private boolean[] onStack;

	public DirectedCycle(DirectedGraph G) {
		onStack = new boolean[G.V()];
		edgeTo = new int[G.V()];
		marked = new boolean[G.V()];
		cycle = null;
		for (int v = 0; v < G.V(); v++)
			if (!marked[v])
				dfs(G, v);
	}

	private void dfs(DirectedGraph G, int v) {

		onStack[v] = true;
		marked[v] = true;

		for (int w : G.adj(v)) {
			if (this.hasCycle())
				return;
			else if (!marked[w]) {
				edgeTo[w] = v;
				dfs(G, w);
			}
			else if (onStack[w]) {
				cycle = new Stack<Integer>();				
				for (int i = v; i != w ; i = edgeTo[i]) {
					cycle.push(i);
				}
				cycle.push(w);
				cycle.push(v);
			}
		}
		
		onStack[v] = false;

	}

	public boolean hasCycle() {
		return cycle != null;
	}
	
	public Iterable<Integer> cycle() {
		return cycle;
	}
}

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
