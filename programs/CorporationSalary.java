import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class CorporationSalary
{
	public boolean [] marked;
	public long [] value;
	
	public long totalSalary(String[] relations)
	{
		int i, j;
		int N;
		long total = 0;
		Graph G;
		
		N = relations.length;
		G = new Graph(N);
		marked = new boolean[N];
		value = new long[N];
			
		for (i = 0; i < N; i++) {
			for (j = 0; j < N; j++) {
				if (relations[i].charAt(j) == 'Y')
					G.addEdge(i, j);
			}
		}

		for (i = 0; i < N; i++)
			dfs(G, i);
				
		for (i = 0; i < N; i++)
			total += value[i];
		
		return total;
	}
	
	public void dfs(Graph G, int v) {
	
		boolean adj = false;
		
		if (marked[v])
			return;
		
		marked[v] = true;
		
		for (int i : G.adj(v)) {
			
			adj = true;
			
			if (!marked[i])
				dfs(G, i);
			
			value[v] += value[i];
		}
		
		if (!adj)
			value[v] = 1;
	
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, long p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		CorporationSalary obj;
		long answer;
		obj = new CorporationSalary();
		long startTime = System.currentTimeMillis();
		answer = obj.totalSalary(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		long p1;
		
		// ----- test 0 -----
		p0 = new String[]{"N"};
		p1 = 1L;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"NNYN","NNYN","NNNN","NYYN"};
		p1 = 5L;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"NNNNNN","YNYNNY","YNNNNY","NNNNNN","YNYNNN","YNNYNN"};
		p1 = 17L;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"NYNNYN","NNNNNN","NNNNNN","NNYNNN","NNNNNN","NNNYYN"};
		p1 = 8L;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new String[]{"NNNN","NNNN","NNNN","NNNN"};
		p1 = 4L;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}

class Graph {

	private final int V;
	private ArrayList<ArrayList<Integer>> adj;
	
	public Graph(int v) {
		this.V = v;
		adj = new ArrayList<ArrayList<Integer>> ();
		for (int i = 0; i < v; i++) {
			adj.add(i, new ArrayList<Integer>());
		}
	}
	
	public void addEdge(int v, int w) {
		adj.get(v).add(w);
//		adj[w].add(v);
	}
	
	public int V() {
		return V;
	}
	
	public Iterable<Integer> adj(int v) {
		return adj.get(v);
	}

}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
