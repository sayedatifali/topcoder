import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class RGBStreet
{
	public int estimateCost(String[] houses)
	{
		int i;
		int j;
		int n;
		int rgb[] = new int[3];
		StringTokenizer st;
		int dp[][];
		int ans[];
		
		n = houses.length;
		
		dp = new int[3][n];
		ans = new int[n];
		
		st = new StringTokenizer(houses[0]);
		rgb[0] = Integer.parseInt(st.nextToken());
		rgb[1] = Integer.parseInt(st.nextToken());
		rgb[2] = Integer.parseInt(st.nextToken());
		
		dp[0][0] = rgb[0];
		dp[1][0] = rgb[1];
		dp[2][0] = rgb[2];
		ans[0] = Math.min(rgb[0], rgb[1]);
		ans[0] = Math.min(ans[0], rgb[2]);
		
		
		for (i = 1; i < n; i++) {
			
			st = new StringTokenizer(houses[i]);
			rgb[0] = Integer.parseInt(st.nextToken());
			rgb[1] = Integer.parseInt(st.nextToken());
			rgb[2] = Integer.parseInt(st.nextToken());
		
			dp[0][i] = Math.min(dp[1][i - 1], dp[2][i - 1]) + rgb[0];
			dp[1][i] = Math.min(dp[0][i - 1], dp[2][i - 1]) + rgb[1];
			dp[2][i] = Math.min(dp[0][i - 1], dp[1][i - 1]) + rgb[2];
			
			ans[i] = Math.min(dp[0][i], dp[1][i]);
			ans[i] = Math.min(dp[2][i], ans[i]);
		
		}
		
		
		return ans[n - 1];
		
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		RGBStreet obj;
		int answer;
		obj = new RGBStreet();
		long startTime = System.currentTimeMillis();
		answer = obj.estimateCost(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		int p1;
		
		// ----- test 0 -----
		p0 = new String[]{"1 100 100","100 1 100","100 100 1"};
		p1 = 3;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"1 100 100","100 100 100","1 100 100"};
		p1 = 102;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"26 40 83","49 60 57","13 89 99"};
		p1 = 96;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"30 19 5","64 77 64","15 19 97","4 71 57","90 86 84","93 32 91"};
		p1 = 208;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new String[]{"71 39 44","32 83 55","51 37 63","89 29 100","83 58 11","65 13 15","47 25 29","60 66 19"};
		p1 = 253;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
