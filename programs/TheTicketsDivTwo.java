import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;

public class TheTicketsDivTwo {
	public double dp[][][];
	
	public double find(int n, int m, int k) {
		int i, j;
		double prob;

		prob = 0;

		if (k < m - 1)
			return 0;
		
		dp = new double[n + 1][n + 1][k + 1];
		
		for (int p = 0; p < n + 1; p++) {
			for (int q = 0; q < n + 1; q++) {
				for (int r = 0; r < k + 1; r++) {
					dp[p][q][r] = -1;
				}
			}
		}

		prob = rec(n, m, k);

		return prob;
	}

	public double rec(int n, int m, int k) {

		double prob;

		prob = 0;

		if (n == 1 && m == 1)
			return 1;

//		if (n == 0 || m == 0)
//			return 0;

		if (k == 0 && m == 1)
			return 1;

		if (k == 0)
			return 0;
		
//		System.out.println("(n,m,k): (" + n + "," + m + "," + k + ")");
		
		if (dp[n][m][k] >= 0)
			return dp[n][m][k];

		if (m == 1) {
			// Choose first or make the first member in line go back to join as the last
			prob = 1.0 / 6.0 + rec(n, n, k - 1) / 2;
		} else {
			// Delete the first member in line or make the first member in line go back to join as the last			
			prob = rec(n - 1, m - 1, k - 1) / 3 + rec(n, m - 1, k - 1) / 2;
		}
		
		dp[n][m][k] = prob;

		return prob;

	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1,
			int p2, boolean hasAnswer, double p3) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2);
		System.out.println("]");
		TheTicketsDivTwo obj;
		double answer;
		obj = new TheTicketsDivTwo();
		long startTime = System.currentTimeMillis();
		answer = obj.find(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0
				+ " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = Math.abs(p3 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p3));
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		int p0;
		int p1;
		int p2;
		double p3;

		// ----- test 0 -----
		p0 = 2;
		p1 = 1;
		p2 = 1;
		p3 = 0.16666666666666666D;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = 2;
		p1 = 1;
		p2 = 2;
		p3 = 0.5833333333333334D;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = 7;
		p1 = 7;
		p2 = 4;
		p3 = 0.0D;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = 4;
		p1 = 2;
		p2 = 10;
		p3 = 0.25264033564814814D;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------

		if (all_right) {
			System.out
					.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
