import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class FoxSequence
{
	public static HashSet<Integer> sHashSet;
	public String isValid(int[] seq)
	{
		int i;
		int N;
		int index;
		boolean status = false;
		sHashSet = new HashSet<Integer>();
		int [] arr;
		
		N = seq.length;
		
		arr = new int[N];
		
		System.arraycopy( seq, 0, arr, 0, N );
		
		Arrays.sort(arr);
		
		if (arr[0] < N - 1)
			sHashSet.add(arr[0]);
		
		for (i = 1; i < N; i++) {
			if (arr[i] < N - 1 && arr[i] > arr[0]) {
				if (!sHashSet.add(seq[i]))
					status = true;
			}
		}
		
		if (!(sHashSet.size() >= 4 || (status && sHashSet.size() == 3)))
			return "NO";
			
		
		index = incrAP(seq, 0);
		System.out.println(index);	
		index = decrAP(seq, index);
		System.out.println(index);
		index = equal(seq, index);
		System.out.println(index);
		index = incrAP(seq, index);
		System.out.println(index);
		index = decrAP(seq, index);
		
		System.out.println("N = " + N + "; index = " + index);
		
		if (index != N)
			return "NO";
		
			
		return "YES";	
		
		
	}
	
	public int incrAP(int [] seq, int start) {
	
		int i;
		int N;
		int count = 0;
		int diff = 0;
		
		i = start + 1;
		N = seq.length;
		
		if (i < N)
			diff = seq[i] - seq[start];
			
		if (diff <= 0)
			return i;
		count = 2;
		for (; i < N; i++) {
			if (seq[i] - seq[i - 1] != diff)
				break;
			count++;
		
		}
				
		return i;
	
	}
	
	public int decrAP(int [] seq, int start) {
	
		int i;
		int N;
		int diff = 0;
		int count;
		
		i = start + 1;
		N = seq.length;
		
		if (i < N)
			diff = seq[i] - seq[start];
			
		if (diff >= 0)
			return i;
		
		for (; i < N; i++) {
		
			if (seq[i] - seq[i - 1] != diff)
				break;
		
		}
		
		return i;
	
	}
	
	public int equal(int [] seq, int start) {
	
		int i;
		int N;
		
		N = seq.length;
		
		for (i = start + 1; i < N; i++) {
			if (seq[i] != seq[i - 1])
				break;
		}
		
		return i;
	
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, String p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		FoxSequence obj;
		String answer;
		obj = new FoxSequence();
		long startTime = System.currentTimeMillis();
		answer = obj.isValid(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p1 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p1);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		String p1;
		
		// ----- test 0 -----
		p0 = new int[]{1,3,5,7,5,3,1,1,1,3,5,7,5,3,1};
		p1 = "YES";
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{1,2,3,4,5,4,3,2,2,2,3,4,5,6,4};
		p1 = "YES";
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{3,6,9,1,9,5,1};
		p1 = "YES";
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{1,2,3,2,1,2,3,2,1,2,3,2,1};
		p1 = "NO";
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{1,3,4,3,1,1,1,1,3,4,3,1};
		p1 = "NO";
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new int[]{6,1,6};
		p1 = "NO";
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
