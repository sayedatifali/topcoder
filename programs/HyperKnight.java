import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class HyperKnight
{
	public static int dx [] = new int [] {1, 1, -1, -1};
	public static int dy [] = new int [] {1, -1, 1, -1};
	
	public long countCells(int a, int b, int numRows, int numColumns, int k)
	{
		int i;
		int j;
		int p;
		int x, y;
		//int k;
		long count = 0;
		int moves;
		
		for (i = 0; i < numRows; i++) {
			for (j = 0; j < numColumns; j++) {
			
							
				moves = 0;
				
				for (p = 0; p < 4; p++) {
					x = i + dx[p] * a;
					y = j + dy[p] * b;
					
					if (x >= 0 && y >= 0 && x < numRows && y < numColumns)
						moves++;
				}
				
				if (moves > k)
					continue;
					
				for (p = 0; p < 4; p++) {
					x = i + dx[p] * b;
					y = j + dy[p] * a;
					
					if (x >= 0 && y >= 0 && x < numRows && y < numColumns)
						moves++;
					
				}
				
				if (moves == k)
					count++;
				
			
			}
		}
		
			
		return count;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, boolean hasAnswer, long p5) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2 + "," + p3 + "," + p4);
		System.out.println("]");
		HyperKnight obj;
		long answer;
		obj = new HyperKnight();
		long startTime = System.currentTimeMillis();
		answer = obj.countCells(p0, p1, p2, p3, p4);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p5);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p5;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		int p2;
		int p3;
		int p4;
		long p5;
		
		// ----- test 0 -----
		p0 = 2;
		p1 = 1;
		p2 = 8;
		p3 = 8;
		p4 = 4;
		p5 = 20L;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 3;
		p1 = 2;
		p2 = 8;
		p3 = 8;
		p4 = 2;
		p5 = 16L;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 1;
		p1 = 3;
		p2 = 7;
		p3 = 11;
		p4 = 0;
		p5 = 0L;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 3;
		p1 = 2;
		p2 = 10;
		p3 = 20;
		p4 = 8;
		p5 = 56L;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 1;
		p1 = 4;
		p2 = 100;
		p3 = 10;
		p4 = 6;
		p5 = 564L;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = 2;
		p1 = 3;
		p2 = 1000000000;
		p3 = 1000000000;
		p4 = 8;
		p5 = 999999988000000036L;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
