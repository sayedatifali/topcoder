import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class CollectingRiders
{
	public static int dx[] = {1, 2, 2, 1, -1, -2, -2, -1};
	public static int dy[] = {2, 1, -1, -2, 2, 1, -1, -2};
	public static int m, n;
	
	public int minimalMoves(String[] board)
	{
		int min;
		int numK;
		int i, j;
		int k = 0;
		int visit[][][];
		int jumps;
		int Krider;
		
		m = board.length;
		n = board[0].length();
		min = Integer.MAX_VALUE;
		
		for (i = 0; i < m; i++) {
			for (j = 0; j < n; j++) {
				if (board[i].charAt(j) != '.')
					k++;
			}
		}
		numK = k;
		visit = new int[k][m][n];
		
		for (i = 0; i < k; i++)
			for (j = 0; j < m; j++)
				for (int p = 0; p < n; p++)
					visit[i][j][p] = -1;
		
		
		k = 0;
		
		for (i = 0; i < m; i++) {
			for (j = 0; j < n; j++) {
				if (board[i].charAt(j) != '.') {
					Krider = board[i].charAt(j) - '0';
	//				System.out.println("Krider = " + Krider);
					visitAllPoints(visit[k], i, j, Krider);
					k++;
				}
			}
		}
	
		/*	
		for (i = 0; i < numK; i++) {
			System.out.println("Rider " + (i + 1) + ": ");
			for (j = 0; j < m; j++) {
				for (int p = 0; p < n; p++) {
					System.out.print(visit[i][j][p] + " ");				
				}
				System.out.println();
			}
		}
		*/
		
		
		for (i = 0; i < m; i++) {
			for (j = 0; j < n; j++) {
				jumps = 0;
				for (k = 0; k < numK; k++) {
					if (visit[k][i][j] == -1) {
						jumps = -1;
						break;
					}
					jumps += visit[k][i][j];
				}
				if (jumps != -1)
					min = Math.min(min, jumps);
			}
		}
		
		if (min == Integer.MAX_VALUE)
			return -1;
		
		return min;
		
		
	}
	
	
	public void visitAllPoints(int [][] visit, int i, int j, int Krider) {
	
		int jumps;
		Queue<Points> pq = new LinkedList<Points>();
		Points points;
		int ix, jy, k;
	
		points = new Points(i, j, 0);
		pq.add(points);
		
		visit[i][j] = 0;
		
		while (!pq.isEmpty()) {
		
			points = pq.poll();
			i = points.i;
			j = points.j;
			k = points.k;
			
	//		System.out.println(k);
			
			jumps = k == 0 ? 0 : (k - 1) / Krider + 1;
			
			visit[i][j] = jumps;
			
			for (int p = 0; p < dx.length; p++) {
			
				ix = i + dx[p];
				jy = j + dy[p];
				
				if (ix < 0 || ix >= m || jy < 0 || jy >= n)
					continue;
		
				if (visit[ix][jy] != -1)
					continue;
						
				points = new Points(ix, jy, k + 1);
				
				pq.add(points);
			
			}
		
		}
	
	}
	
	
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		CollectingRiders obj;
		int answer;
		obj = new CollectingRiders();
		long startTime = System.currentTimeMillis();
		answer = obj.minimalMoves(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		int p1;
		
		// ----- test 0 -----
		p0 = new String[]{"...1","....","2..."};
		p1 = 2;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"........",".1......","........","....3...","........","........",".7......","........"};
		p1 = 2;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"..","2.",".."};
		p1 = 0;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{".1....1."};
		p1 = -1;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new String[]{"9133632343","5286698232","8329333369","5425579782","4465864375","8192124686","3191624314","5198496853","1638163997","6457337215"};
		p1 = 121;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}

class Points {
	public int i;
	public int j;
	public int k;
	
	public Points(int i, int j, int k) {
		this.i = i;
		this.j = j;
		this.k = k;
	}
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
